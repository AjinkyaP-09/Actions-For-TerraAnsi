name: Terraform & Ansible Docker Install

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  terraform_provision:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve

      - name: Get Terraform Outputs
        id: tf_outputs
        run: |
          echo "private_key_pem<<EOF" >> $GITHUB_OUTPUT
          terraform output -raw private_key_pem >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          EC2_PUBLIC_IP=$(terraform output -raw instance_public_ip)
          echo "ec2_public_ip=$EC2_PUBLIC_IP" >> $GITHUB_OUTPUT

    outputs:
      instance_public_ip: ${{ steps.tf_outputs.outputs.ec2_public_ip }}
      private_key_pem: ${{ steps.tf_outputs.outputs.private_key_pem }}

  ansible_configure:
    runs-on: ubuntu-latest
    needs: terraform_provision
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Ansible
        run: pip install ansible

      - name: Save SSH Private Key from Terraform Output
        run: |
          echo "${{ needs.terraform_provision.outputs.private_key_pem }}" > id_rsa_deployer.pem
          chmod 600 id_rsa_deployer.pem

      - name: Write Ansible Inventory
        run: |
          echo "[webservers]" > hosts.ini
          echo "${{ needs.terraform_provision.outputs.instance_public_ip }} ansible_user=ubuntu ansible_ssh_private_key_file=./id_rsa_deployer.pem ansible_ssh_common_args='-o StrictHostKeyChecking=no'" >> hosts.ini
          cat hosts.ini

      - name: Run Ansible playbook
        run: ansible-playbook -i hosts.ini ansi.yml
        env:
          ANSIBLE_HOST_KEY_CHECKING: False
    terraform_destroy:
      runs-on: ubuntu-latest
      needs: ansible_configure  # Wait for Ansible to finish before destroying
      if: github.event_name == 'workflow_dispatch'  # Only allow manual destroy
      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ap-south-1

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v3

        - name: Terraform Init
          run: terraform init

        - name: Terraform Destroy
          run: terraform destroy -auto-approve

